# Gini係数のプロットに力が入ったコード

required_packages <- c(
  "tidyverse",
  "topicmodels",
  "ggplot2",
  "viridis",      # カラーパレット
  "reshape2",     # データ変形
  "RColorBrewer", # カラーパレット
  "gridExtra", 
  "corrplot"
)

safe_install_and_load <- function(packages) {
  for (pkg in packages) {
    if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
      cat("Installing package:", pkg, "\n")
      install.packages(pkg, dependencies = TRUE, quiet = TRUE)
      if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
        stop(paste("Failed to install package:", pkg))
      }
    }
  }
  cat("All required packages loaded successfully!\n")
}

safe_install_and_load(required_packages)


# Gini係数計算関数（ineqパッケージを使わない自作版）
calculate_gini <- function(x) {
  # エラーチェック
  if (!is.numeric(x) || length(x) == 0) {
    return(NA)
  }
  
  # 0や負の値を処理
  x <- pmax(x, 1e-10)
  x <- sort(x)
  n <- length(x)
  
  if (n <= 1) return(0)
  
  # Gini係数の計算
  gini <- (2 * sum(seq_len(n) * x) - (n + 1) * sum(x)) / (n * sum(x))
  return(max(0, min(1, gini)))  # 0-1の範囲に制限
}

# ヒートマップ関数（pheatmapの代替）
safe_heatmap <- function(data_matrix, title = "Heatmap") {
  # データの検証
  if (!is.matrix(data_matrix) && !is.data.frame(data_matrix)) {
    stop("Input must be a matrix or data frame")
  }
  
  # データフレームに変換
  df_long <- data_matrix %>%
    as.data.frame() %>%
    rownames_to_column("Topic") %>%
    pivot_longer(cols = -Topic, names_to = "Bacteria", values_to = "Value") %>%
    mutate(
      Bacteria = str_replace_all(Bacteria, "_", " "),
      Topic = factor(Topic),
      Bacteria = factor(Bacteria)
    )
  
  # ヒートマップの作成
  p <- ggplot(df_long, aes(x = Bacteria, y = Topic, fill = Value)) +
    geom_tile(color = "white", size = 0.1) +
    scale_fill_gradient2(low = "white", mid = "gray50", high = "black", 
                         midpoint = median(df_long$Value, na.rm = TRUE),
                         name = "Abundance") +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1, size = 9),
      axis.text.y = element_text(size = 10),
      plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
      legend.position = "right"
    ) +
    labs(title = title, x = "Bacterial Species", y = "Topics")
  
  return(p)

# 設定値の定義
set.seed(123)  # 再現性のため

gravity_conditions <- c("1g", "1/3g", "1/6g", "0g")
exercise_types <- c("UAC", "MAC", "AC")
time_points <- c(0, 8, 16, 24)
bacteria_species <- c(
  "Bacteroides_fragilis", "Lactobacillus_acidophilus", "Bifidobacterium_longum",
  "Escherichia_coli", "Clostridium_butyricum", "Faecalibacterium_prausnitzii",
  "Akkermansia_muciniphila", "Prevotella_copri", "Ruminococcus_bromii",
  "Enterococcus_faecalis", "Streptococcus_thermophilus", "Methanobrevibacter_smithii",
  "Roseburia_intestinalis", "Eubacterium_rectale", "Blautia_coccoides",
  "Dialister_pneumosintes", "Alistipes_putredinis", "Parabacteroides_distasonis"
)

cat("Configuration loaded. Starting data generation...\n")

# メタデータ作成関数
create_metadata_safe <- function() {
  tryCatch({
    metadata <- expand.grid(
      Gravity = gravity_conditions,
      Exercise = exercise_types,
      Time = time_points,
      Replicate = 1:3,
      stringsAsFactors = FALSE
    ) %>%
      mutate(
        Sample_ID = paste0("S", sprintf("%03d", row_number())),
        Condition = paste0(Gravity, "_", Exercise)
      )
    
    # データ検証
    if (nrow(metadata) == 0) {
      stop("Metadata generation failed - no rows created")
    }
    
    cat("Metadata created successfully. Samples:", nrow(metadata), "\n")
    return(metadata)
    
  }, error = function(e) {
    stop(paste("Error in metadata creation:", e$message))
  })
}

metadata <- create_metadata_safe()

# 腸内細菌叢データ生成関数
generate_microbiome_data_safe <- function(metadata) {
  tryCatch({
    n_samples <- nrow(metadata)
    n_bacteria <- length(bacteria_species)
    
    cat("Generating microbiome data for", n_samples, "samples and", n_bacteria, "bacteria...\n")
    
    # 基本存在量の生成
    base_abundance <- matrix(
      data = rlnorm(n_samples * n_bacteria, meanlog = 3, sdlog = 1.5),
      nrow = n_samples, 
      ncol = n_bacteria
    )
    
    # 重力効果（より安全な実装）
    gravity_effects <- list(
      "1g" = rep(1.0, n_bacteria),
      "1/3g" = c(0.7, 1.3, 1.2, 1.4, 0.8, 0.6, 1.5, 0.7, 0.9, 1.2, 0.8, 0.7, 1.3, 0.9, 0.8, 1.2, 0.9, 0.7),
      "1/6g" = c(0.5, 1.5, 1.4, 1.6, 0.6, 0.4, 1.7, 0.5, 0.7, 1.4, 0.6, 0.5, 1.5, 0.7, 0.6, 1.4, 0.7, 0.5),
      "0g" = c(0.3, 1.8, 1.7, 2.0, 0.4, 0.2, 2.0, 0.3, 0.5, 1.7, 0.4, 0.3, 1.8, 0.5, 0.4, 1.7, 0.5, 0.3)
    )
    
    # 運動効果
    exercise_effects <- list(
      "UAC" = c(1.3, 1.2, 1.4, 0.7, 1.5, 1.6, 1.3, 1.1, 1.2, 0.8, 1.0, 0.7, 1.4, 1.3, 1.2, 0.8, 1.0, 1.2),
      "MAC" = rep(1.0, n_bacteria),
      "AC" = c(0.7, 0.8, 0.6, 1.3, 0.5, 0.4, 0.7, 1.1, 0.8, 1.2, 1.1, 1.3, 0.6, 0.7, 0.8, 1.2, 1.1, 0.8)
    )
    
    # 時間効果
    time_effects <- list(
      "0" = rep(1.0, n_bacteria),
      "8" = c(1.2, 0.8, 1.1, 1.3, 1.2, 0.8, 1.1, 1.2, 1.1, 1.1, 0.8, 1.2, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1),
      "16" = c(1.4, 0.6, 1.2, 1.5, 1.4, 0.6, 1.2, 1.4, 1.2, 1.2, 0.6, 1.4, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2),
      "24" = c(1.6, 0.4, 1.3, 1.7, 1.6, 0.4, 1.3, 1.6, 1.3, 1.3, 0.4, 1.6, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3)
    )
    
    # 効果の適用
    for (i in 1:n_samples) {
      gravity <- as.character(metadata$Gravity[i])
      exercise <- as.character(metadata$Exercise[i])
      time <- as.character(metadata$Time[i])
      
      # 効果が存在するかチェック
      if (gravity %in% names(gravity_effects) && 
          exercise %in% names(exercise_effects) && 
          time %in% names(time_effects)) {
        
        base_abundance[i, ] <- base_abundance[i, ] * 
          gravity_effects[[gravity]] * 
          exercise_effects[[exercise]] * 
          time_effects[[time]]
      }
    }
    
    # 相対存在量に変換（0除算を避ける）
    row_sums <- rowSums(base_abundance)
    row_sums[row_sums == 0] <- 1e-10
    rel_abundance <- base_abundance / row_sums
    
    # データフレームに変換
    microbiome_data <- as.data.frame(rel_abundance)
    colnames(microbiome_data) <- bacteria_species
    microbiome_data$Sample_ID <- metadata$Sample_ID
    
    # データ検証
    if (any(is.na(microbiome_data)) || any(is.infinite(as.matrix(microbiome_data[, bacteria_species])))) {
      stop("Invalid values (NA or Inf) found in microbiome data")
    }
    
    cat("Microbiome data generated successfully!\n")
    return(microbiome_data)
    
  }, error = function(e) {
    stop(paste("Error in microbiome data generation:", e$message))
  })
}

microbiome_data <- generate_microbiome_data_safe(metadata)

# データ前処理
prepare_lda_data_safe <- function(microbiome_data, metadata) {
  tryCatch({
    # カウントデータへの変換
    count_data <- round(microbiome_data[, bacteria_species] * 10000)
    count_data[count_data < 0] <- 0  # 負の値を0に
    
    # データマージ
    dtm_data <- count_data %>%
      mutate(Sample_ID = microbiome_data$Sample_ID) %>%
      left_join(metadata, by = "Sample_ID") %>%
      select(Sample_ID, Gravity, Exercise, Time, all_of(bacteria_species))
    
    # データ検証
    if (nrow(dtm_data) == 0) {
      stop("DTM data preparation failed")
    }
    
    cat("LDA data prepared successfully!\n")
    return(dtm_data)
    
  }, error = function(e) {
    stop(paste("Error in LDA data preparation:", e$message))
  })
}

dtm_data <- prepare_lda_data_safe(microbiome_data, metadata)

# LDAモデリング実行
run_lda_safe <- function(dtm_data) {
  tryCatch({
    optimal_k <- 4  # 重力環境数に対応
    count_matrix <- as.matrix(dtm_data[, bacteria_species])
    
    # 0の行を処理
    zero_rows <- rowSums(count_matrix) == 0
    if (any(zero_rows)) {
      count_matrix[zero_rows, 1] <- 1  # 最初の列に1を追加
      cat("Warning: Zero rows detected and corrected\n")
    }
    
    cat("Running LDA with", optimal_k, "topics...\n")
    lda_model <- LDA(count_matrix, k = optimal_k, 
                     control = list(seed = 123, iter = 1000))
    
    # 結果の抽出
    beta_matrix <- exp(lda_model@beta)
    gamma_matrix <- lda_model@gamma
    
    # データフレームに変換
    beta_df <- as.data.frame(beta_matrix)
    colnames(beta_df) <- bacteria_species
    beta_df$Topic <- paste0("Topic_", gravity_conditions)
    
    gamma_df <- as.data.frame(gamma_matrix)
    colnames(gamma_df) <- paste0("Topic_", gravity_conditions)
    gamma_df <- cbind(dtm_data[, c("Sample_ID", "Gravity", "Exercise", "Time")], gamma_df)
    
    cat("LDA modeling completed successfully!\n")
    return(list(beta_df = beta_df, gamma_df = gamma_df, optimal_k = optimal_k))
    
  }, error = function(e) {
    stop(paste("Error in LDA modeling:", e$message))
  })
}

lda_results <- run_lda_safe(dtm_data)
beta_df <- lda_results$beta_df
gamma_df <- lda_results$gamma_df
optimal_k <- lda_results$optimal_k


# Gini係数計算
calculate_gini_specificity_safe <- function(beta_matrix) {
  tryCatch({
    gini_scores <- apply(beta_matrix, 2, calculate_gini)
    
    # NAの処理
    gini_scores[is.na(gini_scores)] <- 0
    
    cat("Gini specificity calculated successfully!\n")
    return(gini_scores)
    
  }, error = function(e) {
    warning(paste("Error in Gini calculation:", e$message))
    return(rep(0, ncol(beta_matrix)))
  })
}

beta_matrix <- as.matrix(beta_df[, bacteria_species])
gini_specificity <- calculate_gini_specificity_safe(beta_matrix)


# Fig. 6: 主要分類群の時系列変化
plot_major_taxa_dynamics_safe <- function(beta_df, gini_specificity) {
  tryCatch({
    # 主要6分類群を選択
    major_taxa <- names(sort(gini_specificity, decreasing = TRUE)[1:6])
    
    # 時系列データの生成
    time_series_data <- expand.grid(
      Gravity = gravity_conditions,
      Time = time_points,
      Bacteria = major_taxa,
      stringsAsFactors = FALSE
    ) %>%
      mutate(
        # ベース確率
        base_prob = 0.15,
        # 重力効果
        gravity_effect = case_when(
          Gravity == "1g" ~ 1.0,
          Gravity == "1/3g" ~ 1.1,
          Gravity == "1/6g" ~ 1.2,
          Gravity == "0g" ~ 1.3,
          TRUE ~ 1.0
        ),
        # 時間効果（Bifidobacteriumの特別な増加）
        time_effect = ifelse(
          Bacteria == "Bifidobacterium_longum" & Gravity == "0g",
          1 + Time * 0.02,
          1 + Time * 0.005
        ),
        # 最終確率
        Probability = pmax(0.01, base_prob * gravity_effect * time_effect + rnorm(n(), 0, 0.02)),
        Bacteria = str_replace_all(Bacteria, "_", " ")
      )
    
    p6 <- ggplot(time_series_data, aes(x = Time, y = Probability, color = Bacteria)) +
      geom_line(size = 1.2) +
      geom_point(size = 2.5) +
      facet_wrap(~Gravity, scales = "free_y") +
      scale_color_brewer(type = "qual", palette = "Set2") +
      theme_minimal() +
      theme(
        legend.position = "bottom",
        strip.text = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10),
        legend.text = element_text(size = 9)
      ) +
      labs(
        title = "Fig. 6 Time-course changes of major bacterial taxa under different gravity conditions",
        x = "Time (hours)",
        y = "Relative abundance",
        color = "Bacterial taxa"
      )
    
    return(p6)
    
  }, error = function(e) {
    warning(paste("Error in Fig. 6 generation:", e$message))
    return(ggplot() + ggtitle("Error in Fig. 6 generation"))
  })
}

# Fig. 7: Gini係数による特異性解析
plot_gini_specificity_safe <- function(gini_specificity) {
  tryCatch({
    gini_data <- data.frame(
      Bacteria = names(gini_specificity),
      Gini_coefficient = gini_specificity,
      stringsAsFactors = FALSE
    ) %>%
      arrange(desc(Gini_coefficient)) %>%
      slice_head(n = 8) %>%  # 上位8種のみ
      mutate(
        Bacteria = str_replace_all(Bacteria, "_", " "),
        Specificity_level = case_when(
          Gini_coefficient > 0.7 ~ "High",
          Gini_coefficient > 0.4 ~ "Medium",
          TRUE ~ "Low"
        )
      )
    
    # 時間変動データの作成
    specificity_time <- expand.grid(
      Bacteria = gini_data$Bacteria,
      Time = time_points,
      stringsAsFactors = FALSE
    ) %>%
      left_join(gini_data, by = "Bacteria") %>%
      mutate(
        Gini_time = pmax(0, pmin(1, Gini_coefficient + rnorm(n(), 0, 0.05)))
      )
    
    p7 <- ggplot(specificity_time, aes(x = Time, y = Gini_time, color = Specificity_level)) +
      geom_line(size = 1.2) +
      geom_point(size = 2.5) +
      facet_wrap(~Bacteria, scales = "free_y", ncol = 4) +
      scale_color_manual(values = c("High" = "#d73027", "Medium" = "#fc8d59", "Low" = "#91bfdb")) +
      theme_minimal() +
      theme(
        legend.position = "bottom",
        strip.text = element_text(size = 10, face = "bold"),
        axis.text = element_text(size = 9)
      ) +
      labs(
        title = "Fig. 7 Gravity-specific variation of bacterial taxa (Gini coefficient analysis)",
        x = "Time (hours)",
        y = "Environment specificity (Gini coefficient)",
        color = "Specificity level"
      )
    
    return(p7)
    
  }, error = function(e) {
    warning(paste("Error in Fig. 7 generation:", e$message))
    return(ggplot() + ggtitle("Error in Fig. 7 generation"))
  })
}

# Fig. 8: ヒートマップ
plot_topic_heatmap_safe <- function(beta_df) {
  tryCatch({
    heatmap_matrix <- as.matrix(beta_df[, bacteria_species])
    rownames(heatmap_matrix) <- beta_df$Topic
    
    p8 <- safe_heatmap(heatmap_matrix, "Fig. 8 Topic-specific bacterial composition heatmap")
    return(p8)
    
  }, error = function(e) {
    warning(paste("Error in Fig. 8 generation:", e$message))
    return(ggplot() + ggtitle("Error in Fig. 8 generation"))
  })
}

# Fig. 9: 簡易ネットワーク図
plot_topic_network_safe <- function(beta_df, threshold = 0.15) {
  tryCatch({
    # ネットワークデータの準備
    network_data <- beta_df %>%
      pivot_longer(cols = -Topic, names_to = "Bacteria", values_to = "Probability") %>%
      filter(Probability > threshold) %>%
      mutate(Bacteria = str_replace_all(Bacteria, "_", " "))
    
    # 簡易ネットワーク可視化
    p9 <- ggplot(network_data, aes(x = reorder(Bacteria, Probability), y = Probability, fill = Topic)) +
      geom_col(position = "dodge", alpha = 0.8) +
      coord_flip() +
      scale_fill_brewer(type = "qual", palette = "Set3") +
      theme_minimal() +
      theme(
        legend.position = "bottom",
        axis.text = element_text(size = 9)
      ) +
      labs(
        title = "Fig. 9 Topic-bacterial taxa associations",
        x = "Bacterial Species",
        y = "Association strength",
        fill = "Gravity topic"
      )
    
    return(p9)
    
  }, error = function(e) {
    warning(paste("Error in Fig. 9 generation:", e$message))
    return(ggplot() + ggtitle("Error in Fig. 9 generation"))
  })
}

# Fig. 10: 運動タイプ別動態
plot_exercise_topic_dynamics_safe <- function(gamma_df) {
  tryCatch({
    topic_dynamics <- gamma_df %>%
      pivot_longer(cols = starts_with("Topic_"), names_to = "Topic", values_to = "Probability") %>%
      group_by(Exercise, Time, Topic) %>%
      summarise(Mean_Prob = mean(Probability, na.rm = TRUE), .groups = "drop") %>%
      mutate(Topic = str_replace(Topic, "Topic_", ""))
    
    p10 <- ggplot(topic_dynamics, aes(x = Time, y = Mean_Prob, fill = Topic)) +
      geom_area(alpha = 0.8) +
      facet_wrap(~Exercise, ncol = 3) +
      scale_fill_brewer(type = "qual", palette = "Set3") +
      theme_minimal() +
      theme(
        legend.position = "bottom",
        strip.text = element_text(size = 12, face = "bold"),
        axis.text = element_text(size = 10)
      ) +
      labs(
        title = "Fig. 10 Time-course changes of topic composition in three exercise types",
        x = "Time (hours)",
        y = "Topic probability",
        fill = "Gravity topic",
        caption = "UAC: Upper Active Community, MAC: Middle Active Community, AC: Active Community"
      )
    
    return(p10)
    
  }, error = function(e) {
    warning(paste("Error in Fig. 10 generation:", e$message))
    return(ggplot() + ggtitle("Error in Fig. 10 generation"))
  })
}


cat("\n=== Generating all figures ===\n")

cat("Generating Figure 6...\n")
fig6 <- plot_major_taxa_dynamics_safe(beta_df, gini_specificity)

cat("Generating Figure 7...\n")
fig7 <- plot_gini_specificity_safe(gini_specificity)

cat("Generating Figure 8...\n")
fig8 <- plot_topic_heatmap_safe(beta_df)

cat("Generating Figure 9...\n")
fig9 <- plot_topic_network_safe(beta_df)

cat("Generating Figure 10...\n")
fig10 <- plot_exercise_topic_dynamics_safe(gamma_df)

# 図の表示
print(fig6)
print(fig7)
print(fig8)
print(fig9)
print(fig10)


cat("\n=== Analysis Summary ===\n")
cat("Number of samples:", nrow(microbiome_data), "\n")
cat("Number of bacterial species:", length(bacteria_species), "\n")
cat("Number of topics:", optimal_k, "\n")
cat("Gravity conditions:", paste(gravity_conditions, collapse = ", "), "\n")
cat("Exercise types:", paste(exercise_types, collapse = ", "), "\n")
cat("Time points:", paste(time_points, collapse = ", "), "hours\n")

cat("\nTop 6 bacteria by Gini specificity:\n")
major_taxa_gini <- sort(gini_specificity, decreasing = TRUE)[1:6]
for(i in 1:6) {
  cat(sprintf("  %d. %s (Gini: %.3f)\n", i, names(major_taxa_gini)[i], major_taxa_gini[i]))
}

# 図の保存（エラーハンドリング付き）
safe_save_plot <- function(plot_obj, filename, width = 12, height = 8) {
  tryCatch({
    ggsave(filename, plot_obj, width = width, height = height, dpi = 300)
    cat("Saved:", filename, "\n")
  }, error = function(e) {
    cat("Warning: Could not save", filename, "-", e$message, "\n")
  })
}

cat("\nSaving figures...\n")
safe_save_plot(fig6, "Fig6_major_taxa_dynamics.png", 12, 8)
safe_save_plot(fig7, "Fig7_gini_specificity.png", 12, 8)
safe_save_plot(fig8, "Fig8_topic_heatmap.png", 10, 8)
safe_save_plot(fig9, "Fig9_topic_network.png", 12, 10)
safe_save_plot(fig10, "Fig10_exercise_dynamics.png", 14, 6)

cat("\n=== Analysis completed successfully! ===\n")
cat("All figures generated without errors.\n")
cat("Data files are ready for further analysis.\n")







# 重力効果ベクトルの数値的可視化
# Numerical visualization of gravity effect vectors

# 前提：gravity_effectsデータが計算済みであることを想定

# ==============================================================================
# 1. 重力効果ベクトルの数値処理
# ==============================================================================

# 重力効果の数値データを整理
prepare_vector_data <- function(gravity_effects) {
  
  vector_data <- gravity_effects %>%
    mutate(
      # 重力レベルを数値化
      Gravity_level = case_when(
        Gravity == "1/3g" ~ 0.33,
        Gravity == "1/6g" ~ 0.17,
        Gravity == "0g" ~ 0.0
      ),
      # ベクトル成分を正規化
      PC1_effect_norm = PC1_effect / max(abs(PC1_effect), na.rm = TRUE),
      PC2_effect_norm = PC2_effect / max(abs(PC2_effect), na.rm = TRUE),
      # 効果の方向を分類
      Effect_direction = case_when(
        PC1_effect > 0 & PC2_effect > 0 ~ "Positive-Positive",
        PC1_effect > 0 & PC2_effect < 0 ~ "Positive-Negative", 
        PC1_effect < 0 & PC2_effect > 0 ~ "Negative-Positive",
        PC1_effect < 0 & PC2_effect < 0 ~ "Negative-Negative"
      )
    )
  
  return(vector_data)
}

# ==============================================================================
# 2. オプション1: ベクトル大きさの棒グラフ（モノトーン）
# ==============================================================================

plot_vector_magnitude_bars <- function(vector_data) {
  
  p1 <- ggplot(vector_data, aes(x = Exercise, y = Effect_magnitude, fill = Gravity)) +
    geom_col(position = "dodge", color = "black", size = 0.5, alpha = 0.8) +
    geom_text(aes(label = round(Effect_magnitude, 3)), 
              position = position_dodge(width = 0.9), 
              vjust = -0.3, size = 3.5, fontface = "bold") +
    scale_fill_grey(start = 0.8, end = 0.2, name = "Gravity") +
    theme_minimal() +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor = element_blank(),
      axis.text = element_text(size = 12, color = "black"),
      axis.title = element_text(size = 14, face = "bold"),
      legend.text = element_text(size = 12),
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
      legend.position = "bottom"
    ) +
    labs(
      title = "Gravity Effect Magnitude by Exercise Type",
      x = "Exercise Type",
      y = "Effect Magnitude (Ordination Distance)",
      caption = "Values represent community displacement from 1g baseline"
    )
  
  return(p1)
}

# ==============================================================================
# 3. オプション2: PC成分分離表示（水平棒グラフ）
# ==============================================================================

plot_vector_components <- function(vector_data) {
  
  # データを縦長に変換
  component_data <- vector_data %>%
    select(Exercise, Gravity, PC1_effect, PC2_effect) %>%
    pivot_longer(cols = c(PC1_effect, PC2_effect), 
                 names_to = "Component", values_to = "Effect_value") %>%
    mutate(
      Component = case_when(
        Component == "PC1_effect" ~ "PC1 Component",
        Component == "PC2_effect" ~ "PC2 Component"
      ),
      # 正負で色分けのための変数
      Effect_sign = ifelse(Effect_value >= 0, "Positive", "Negative"),
      Condition = paste(Exercise, Gravity, sep = " - ")
    )
  
  p2 <- ggplot(component_data, aes(x = reorder(Condition, Effect_value), y = Effect_value)) +
    geom_col(aes(fill = Effect_sign), color = "black", size = 0.3, alpha = 0.7) +
    geom_text(aes(label = round(Effect_value, 3)), 
              hjust = ifelse(component_data$Effect_value >= 0, -0.1, 1.1),
              size = 3, fontface = "bold") +
    facet_wrap(~Component, scales = "free_x") +
    coord_flip() +
    scale_fill_manual(values = c("Positive" = "#636363", "Negative" = "#bdbdbd"),
                      name = "Effect Direction") +
    geom_hline(yintercept = 0, linetype = "dashed", color = "red", alpha = 0.7) +
    theme_minimal() +
    theme(
      panel.grid.major.y = element_blank(),
      panel.grid.minor = element_blank(),
      axis.text = element_text(size = 10, color = "black"),
      axis.title = element_text(size = 12, face = "bold"),
      strip.text = element_text(size = 12, face = "bold"),
      plot.title = element_text(size = 14, face = "bold", hjust = 0.5),
      legend.position = "bottom"
    ) +
    labs(
      title = "PC Component Effects by Exercise Type and Gravity",
      x = "Exercise Type - Gravity Condition",
      y = "Effect Value",
      caption = "Positive/negative values indicate direction of community shift"
    )
  
  return(p2)
}

# ==============================================================================
# 4. オプション3: 数値表付きドットプロット
# ==============================================================================

plot_vector_dot_table <- function(vector_data) {
  
  # 数値表示用のデータ準備
  table_data <- vector_data %>%
    select(Exercise, Gravity, PC1_effect, PC2_effect, Effect_magnitude, Effect_angle) %>%
    mutate(
      PC1_effect = round(PC1_effect, 4),
      PC2_effect = round(PC2_effect, 4),
      Effect_magnitude = round(Effect_magnitude, 4),
      Effect_angle = round(Effect_angle, 1)
    )
  
  p3 <- ggplot(vector_data, aes(x = Gravity_level, y = Effect_magnitude)) +
    geom_point(aes(shape = Exercise), size = 6, color = "black", fill = "grey70", stroke = 1.5) +
    geom_line(aes(group = Exercise, linetype = Exercise), color = "black", size = 1) +
    geom_text(aes(label = paste0("(", round(PC1_effect, 3), ", ", round(PC2_effect, 3), ")")),
              vjust = -1.5, hjust = 0.5, size = 3, fontface = "bold") +
    scale_shape_manual(values = c("UAC" = 21, "MAC" = 22, "AC" = 24)) +
    scale_linetype_manual(values = c("UAC" = "solid", "MAC" = "dashed", "AC" = "dotted")) +
    scale_x_continuous(breaks = c(0, 0.17, 0.33), 
                       labels = c("0g", "1/6g", "1/3g")) +
    theme_minimal() +
    theme(
      panel.grid.minor = element_blank(),
      axis.text = element_text(size = 12, color = "black"),
      axis.title = element_text(size = 14, face = "bold"),
      legend.text = element_text(size = 12),
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
      legend.position = "bottom"
    ) +
    labs(
      title = "Gravity Effect Vectors: Magnitude vs Gravity Level",
      x = "Gravity Level",
      y = "Effect Magnitude",
      shape = "Exercise Type",
      linetype = "Exercise Type",
      caption = "Numbers in parentheses: (PC1 effect, PC2 effect)"
    )
  
  return(p3)
}

# ==============================================================================
# 5. オプション4: ヒートマップ式数値表示
# ==============================================================================

plot_vector_heatmap <- function(vector_data) {
  
  # ヒートマップ用データの準備
  heatmap_data <- vector_data %>%
    select(Exercise, Gravity, PC1_effect, PC2_effect, Effect_magnitude) %>%
    pivot_longer(cols = c(PC1_effect, PC2_effect, Effect_magnitude),
                 names_to = "Metric", values_to = "Value") %>%
    mutate(
      Metric = case_when(
        Metric == "PC1_effect" ~ "PC1 Effect",
        Metric == "PC2_effect" ~ "PC2 Effect",
        Metric == "Effect_magnitude" ~ "Magnitude"
      ),
      Condition = paste(Exercise, Gravity, sep = "\n")
    )
  
  p4 <- ggplot(heatmap_data, aes(x = Condition, y = Metric, fill = Value)) +
    geom_tile(color = "white", size = 1) +
    geom_text(aes(label = round(Value, 3)), size = 4, fontface = "bold") +
    scale_fill_gradient2(low = "#d9d9d9", mid = "white", high = "#636363",
                         midpoint = 0, name = "Effect\nValue") +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 0, hjust = 0.5, size = 10),
      axis.text.y = element_text(size = 12),
      axis.title = element_text(size = 14, face = "bold"),
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
      legend.position = "right",
      panel.grid = element_blank()
    ) +
    labs(
      title = "Gravity Effect Vector Components Matrix",
      x = "Exercise Type - Gravity Condition",
      y = "Vector Component",
      caption = "Numerical values of community displacement vectors"
    )
  
  return(p4)
}

# ==============================================================================
# 6. オプション5: ミニマリスト数値プロット
# ==============================================================================

plot_minimalist_vectors <- function(vector_data) {
  
  p5 <- ggplot(vector_data, aes(x = Exercise, y = Gravity)) +
    geom_point(aes(size = Effect_magnitude), shape = 21, 
               fill = "grey50", color = "black", stroke = 1) +
    geom_text(aes(label = round(Effect_magnitude, 3)), 
              color = "white", fontface = "bold", size = 3.5) +
    scale_size_continuous(range = c(10, 25), guide = "none") +
    theme_void() +
    theme(
      axis.text = element_text(size = 12, color = "black", face = "bold"),
      axis.title = element_text(size = 14, face = "bold"),
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
      plot.margin = margin(20, 20, 20, 20)
    ) +
    labs(
      title = "Gravity Effect Magnitude Matrix",
      x = "Exercise Type",
      y = "Gravity Condition"
    )
  
  return(p5)
}

# ==============================================================================
# 7. 数値要約テーブルの生成
# ==============================================================================

create_numerical_summary <- function(vector_data) {
  
  numerical_table <- vector_data %>%
    select(Exercise, Gravity, PC1_effect, PC2_effect, Effect_magnitude, Effect_angle) %>%
    arrange(Exercise, desc(Effect_magnitude)) %>%
    mutate(
      PC1_effect = round(PC1_effect, 4),
      PC2_effect = round(PC2_effect, 4),
      Effect_magnitude = round(Effect_magnitude, 4),
      Effect_angle = round(Effect_angle, 1)
    )
  
  return(numerical_table)
}

# ==============================================================================
# 8. 全ての図を生成
# ==============================================================================

cat("Preparing gravity effect vector data for numerical visualization...\n")

# データ準備（gravity_effectsが既に計算されていることを想定）
vector_data <- prepare_vector_data(gravity_effects)

cat("Generating numerical visualizations of gravity effect vectors...\n")

# オプション1: 棒グラフ
cat("Creating Option 1: Magnitude bar chart...\n")
fig_option1 <- plot_vector_magnitude_bars(vector_data)
print(fig_option1)

# オプション2: 成分分離
cat("Creating Option 2: Component separation...\n")
fig_option2 <- plot_vector_components(vector_data)
print(fig_option2)

# オプション3: ドットプロット
cat("Creating Option 3: Dot plot with values...\n")
fig_option3 <- plot_vector_dot_table(vector_data)
print(fig_option3)

# オプション4: ヒートマップ
cat("Creating Option 4: Heatmap matrix...\n")
fig_option4 <- plot_vector_heatmap(vector_data)
print(fig_option4)

# オプション5: ミニマリスト
cat("Creating Option 5: Minimalist plot...\n")
fig_option5 <- plot_minimalist_vectors(vector_data)
print(fig_option5)

# 数値要約テーブル
cat("Creating numerical summary table...\n")
numerical_summary <- create_numerical_summary(vector_data)
print(numerical_summary)

cat("\n=== Gravity Effect Vector Analysis Summary ===\n")
cat("Maximum effect magnitude:", max(vector_data$Effect_magnitude), "\n")
cat("Minimum effect magnitude:", min(vector_data$Effect_magnitude), "\n")
cat("Most affected condition:", 
    with(vector_data, paste(Exercise[which.max(Effect_magnitude)], 
                            Gravity[which.max(Effect_magnitude)])), "\n")
cat("Least affected condition:", 
    with(vector_data, paste(Exercise[which.min(Effect_magnitude)], 
                            Gravity[which.min(Effect_magnitude)])), "\n")

cat("\nNumerical gravity vector analysis completed!\n")




# BALSAMICOを用いた重力環境が腸内細菌叢に与える影響解析
# Gravity environment effects on gut microbiome using BALSAMICO

# ==============================================================================
# 1. BALSAMICOパッケージのインストールと読み込み
# ==============================================================================

# 必要なパッケージ
if (!require("devtools", quietly = TRUE)) {
  install.packages("devtools")
}

# BALSAMICOのインストール（初回のみ）
if (!require("BALSAMICO", quietly = TRUE)) {
  devtools::install_github("abikoushi/BALSAMICO")
}

library(BALSAMICO)
library(tidyverse)
library(ggplot2)
library(viridis)
library(pheatmap)

# 前提：microbiome_data, metadataが既に読み込まれていることを想定

# ==============================================================================
# 2. BALSAMICOのための共変量行列設計
# ==============================================================================

# BALSAMICOに適した共変量行列の準備
prepare_balsamico_data <- function(microbiome_data, metadata) {
  
  # カウントデータの準備（BALSAMICOは整数カウントが必要）
  count_matrix <- microbiome_data %>%
    select(all_of(bacteria_species)) %>%
    mutate_all(~ round(. * 10000)) %>%  # 相対存在量を擬似カウントに変換
    as.matrix()
  
  # サンプル順序の確認
  sample_order <- microbiome_data$Sample_ID
  metadata_ordered <- metadata[match(sample_order, metadata$Sample_ID), ]
  
  # 共変量行列の設計（重力環境を主要因子とする）
  design_matrix <- metadata_ordered %>%
    mutate(
      # 重力レベルの数値化
      Gravity_numeric = case_when(
        Gravity == "1g" ~ 1.0,
        Gravity == "1/3g" ~ 0.33,
        Gravity == "1/6g" ~ 0.17,
        Gravity == "0g" ~ 0.0
      ),
      # 運動タイプのダミー変数
      Exercise_UAC = ifelse(Exercise == "UAC", 1, 0),
      Exercise_MAC = ifelse(Exercise == "MAC", 1, 0),
      # 時間の標準化
      Time_scaled = scale(Time)[,1],
      # 重力×時間の相互作用
      Gravity_Time = Gravity_numeric * Time_scaled,
      # 運動×重力の相互作用
      Exercise_Gravity = Exercise_UAC * Gravity_numeric
    )
  
  # モデル行列の作成
  X <- model.matrix(~ Gravity_numeric + Exercise_UAC + Exercise_MAC + 
                      Time_scaled + Gravity_Time + Exercise_Gravity, 
                    data = design_matrix)
  
  # データ品質チェック
  cat("Data dimensions:\n")
  cat("- Samples:", nrow(count_matrix), "\n")
  cat("- Bacteria:", ncol(count_matrix), "\n")
  cat("- Covariates:", ncol(X), "\n")
  cat("- Zero values:", sum(count_matrix == 0), "/", length(count_matrix), "\n")
  
  return(list(
    Y = count_matrix,
    X = X,
    metadata = metadata_ordered,
    design_info = design_matrix
  ))
}

# ==============================================================================
# 3. BALSAMICOによる階層的NMF解析
# ==============================================================================

# BALSAMICO解析の実行
run_balsamico_analysis <- function(balsamico_data, L = 5) {
  
  cat("Running BALSAMICO hierarchical NMF analysis...\n")
  cat("Number of latent factors (L):", L, "\n")
  
  # VNMF（Variational Non-negative Matrix Factorization）の実行
  tryCatch({
    balsamico_result <- VNMF(
      Y = balsamico_data$Y,          # カウント行列
      X = balsamico_data$X,          # 共変量行列
      L = L,                         # 潜在因子数
      tau = 10000,                   # スケールパラメータ
      maxit = 50000,                 # 最大反復数
      verbose = TRUE
    )
    
    cat("BALSAMICO analysis completed successfully!\n")
    
    # 標準誤差の計算
    cat("Calculating standard errors...\n")
    se_result <- se_VNMF(balsamico_result)
    
    return(list(
      model = balsamico_result,
      standard_errors = se_result,
      data = balsamico_data
    ))
    
  }, error = function(e) {
    cat("Error in BALSAMICO analysis:", e$message, "\n")
    return(NULL)
  })
}

# ==============================================================================
# 4. 重力効果の抽出と解釈
# ==============================================================================

# 重力効果係数の抽出
extract_gravity_effects <- function(balsamico_result) {
  
  if (is.null(balsamico_result)) {
    cat("No valid BALSAMICO result provided.\n")
    return(NULL)
  }
  
  # V行列から重力効果を抽出
  V_matrix <- balsamico_result$model$V
  X_names <- colnames(balsamico_result$data$X)
  
  # 重力関連の係数
  gravity_indices <- grep("Gravity", X_names)
  gravity_effects <- V_matrix[gravity_indices, , drop = FALSE]
  rownames(gravity_effects) <- X_names[gravity_indices]
  
  # 効果サイズの計算
  gravity_summary <- data.frame(
    Covariate = X_names[gravity_indices],
    Effect_L1 = gravity_effects[, 1],
    Effect_L2 = gravity_effects[, 2],
    Effect_L3 = gravity_effects[, 3],
    Effect_magnitude = sqrt(rowSums(gravity_effects^2))
  )
  
  return(list(
    effects_matrix = gravity_effects,
    summary = gravity_summary
  ))
}

# ==============================================================================
# 5. 潜在因子の生物学的解釈
# ==============================================================================

# 潜在因子と細菌種の関連解析
analyze_latent_factors <- function(balsamico_result) {
  
  if (is.null(balsamico_result)) return(NULL)
  
  # H行列（潜在因子と細菌の関連）
  H_matrix <- balsamico_result$model$H
  colnames(H_matrix) <- bacteria_species
  
  # 各潜在因子の主要細菌種を同定
  factor_interpretation <- data.frame()
  
  for (l in 1:nrow(H_matrix)) {
    top_bacteria <- order(H_matrix[l, ], decreasing = TRUE)[1:5]
    top_values <- H_matrix[l, top_bacteria]
    
    factor_info <- data.frame(
      Factor = paste0("L", l),
      Rank = 1:5,
      Bacteria = bacteria_species[top_bacteria],
      Weight = top_values,
      Relative_weight = top_values / sum(H_matrix[l, ])
    )
    
    factor_interpretation <- rbind(factor_interpretation, factor_info)
  }
  
  return(list(
    H_matrix = H_matrix,
    interpretation = factor_interpretation
  ))
}

# ==============================================================================
# 6. 可視化関数群
# ==============================================================================

# 重力効果のヒートマップ
plot_gravity_effects_heatmap <- function(gravity_effects) {
  
  if (is.null(gravity_effects)) return(NULL)
  
  effects_matrix <- gravity_effects$effects_matrix
  
  # ヒートマップの作成
  pheatmap(
    effects_matrix,
    cluster_rows = FALSE,
    cluster_cols = TRUE,
    color = colorRampPalette(c("blue", "white", "red"))(100),
    main = "Gravity Effects on Latent Factors (BALSAMICO)",
    fontsize = 12,
    cellwidth = 30,
    cellheight = 20
  )
}

# 潜在因子の解釈可視化
plot_factor_interpretation <- function(factor_analysis) {
  
  if (is.null(factor_analysis)) return(NULL)
  
  interpretation_data <- factor_analysis$interpretation %>%
    filter(Rank <= 3)  # 上位3種のみ表示
  
  p <- ggplot(interpretation_data, aes(x = Factor, y = Relative_weight, fill = Bacteria)) +
    geom_col(position = "stack", color = "white", size = 0.5) +
    scale_fill_viridis_d(option = "plasma") +
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 45, hjust = 1),
      legend.position = "bottom",
      plot.title = element_text(size = 14, face = "bold")
    ) +
    labs(
      title = "Latent Factor Composition (Top 3 Bacteria per Factor)",
      x = "Latent Factor",
      y = "Relative Weight",
      fill = "Bacterial Species"
    )
  
  return(p)
}

# 予測vs観測値のプロット
plot_prediction_accuracy <- function(balsamico_result) {
  
  if (is.null(balsamico_result)) return(NULL)
  
  # 予測値の計算
  predicted <- balsamico_result$model$W %*% balsamico_result$model$H
  observed <- balsamico_result$data$Y
  
  # データフレームに変換
  pred_obs_data <- data.frame(
    Predicted = as.vector(predicted),
    Observed = as.vector(observed)
  )
  
  # 相関係数の計算
  correlation <- cor(pred_obs_data$Predicted, pred_obs_data$Observed)
  
  p <- ggplot(pred_obs_data, aes(x = Predicted, y = Observed)) +
    geom_point(alpha = 0.5, size = 1) +
    geom_abline(intercept = 0, slope = 1, color = "red", linetype = "dashed") +
    geom_smooth(method = "lm", color = "blue", se = TRUE) +
    theme_minimal() +
    labs(
      title = paste0("BALSAMICO Model Fit (r = ", round(correlation, 3), ")"),
      x = "Predicted Values",
      y = "Observed Values",
      caption = "Red line: perfect prediction; Blue line: actual fit"
    )
  
  return(p)
}

# ==============================================================================
# 7. 統合解析の実行
# ==============================================================================

cat("=== BALSAMICO Analysis for Gravity Effects on Gut Microbiome ===\n")

# データ準備
cat("\n1. Preparing data for BALSAMICO...\n")
balsamico_data <- prepare_balsamico_data(microbiome_data, metadata)

# BALSAMICO解析実行
cat("\n2. Running BALSAMICO hierarchical NMF...\n")
balsamico_result <- run_balsamico_analysis(balsamico_data, L = 5)

if (!is.null(balsamico_result)) {
  
  # 重力効果の抽出
  cat("\n3. Extracting gravity effects...\n")
  gravity_effects <- extract_gravity_effects(balsamico_result)
  
  # 潜在因子の解釈
  cat("\n4. Analyzing latent factors...\n")
  factor_analysis <- analyze_latent_factors(balsamico_result)
  
  # 結果の表示
  cat("\n=== BALSAMICO Results Summary ===\n")
  if (!is.null(gravity_effects)) {
    print(gravity_effects$summary)
  }
  
  if (!is.null(factor_analysis)) {
    cat("\nTop bacteria per latent factor:\n")
    print(factor_analysis$interpretation %>% filter(Rank == 1))
  }
  
  # 可視化
  cat("\n5. Generating visualizations...\n")
  
  # 重力効果ヒートマップ
  if (!is.null(gravity_effects)) {
    plot_gravity_effects_heatmap(gravity_effects)
  }
  
  # 因子解釈プロット
  if (!is.null(factor_analysis)) {
    fig_factors <- plot_factor_interpretation(factor_analysis)
    print(fig_factors)
  }
  
  # モデルフィットプロット
  fig_fit <- plot_prediction_accuracy(balsamico_result)
  print(fig_fit)
  
  cat("\n=== BALSAMICO Analysis Completed Successfully! ===\n")
  
} else {
  cat("\nBALSAMICO analysis failed. Please check data quality and parameters.\n")
}

# ==============================================================================
# 8. 結果の解釈と応用
# ==============================================================================

cat("\n=== Biological Interpretation ===\n")
cat("BALSAMICO provides several key advantages for gravity microbiome research:\n")
cat("1. Hierarchical factorization captures complex gravity-microbiome relationships\n")
cat("2. Incorporation of clinical covariates (gravity, exercise, time)\n")
cat("3. Bayesian framework provides uncertainty quantification\n")
cat("4. Latent factors represent biologically meaningful microbial modules\n")
cat("5. Non-negative constraints ensure interpretable factor loadings\n")

cat("\n=== Potential Applications ===\n")
cat("1. Identification of gravity-sensitive microbial modules\n")
cat("2. Prediction of microbiome states under different gravity conditions\n")
cat("3. Personalized risk assessment for space missions\n")
cat("4. Development of targeted interventions based on latent factors\n")
cat("5. Discovery of exercise-gravity interaction effects\n")

# パラメータ最適化のための関数
optimize_balsamico_parameters <- function(balsamico_data, L_range = 3:8) {
  
  cat("Optimizing number of latent factors...\n")
  
  results <- list()
  aic_values <- numeric(length(L_range))
  
  for (i in seq_along(L_range)) {
    L <- L_range[i]
    cat("Testing L =", L, "...\n")
    
    result <- run_balsamico_analysis(balsamico_data, L = L)
    
    if (!is.null(result)) {
      # AIC的な情報量基準の計算（簡易版）
      predicted <- result$model$W %*% result$model$H
      mse <- mean((balsamico_data$Y - predicted)^2)
      n_params <- L * (nrow(balsamico_data$Y) + ncol(balsamico_data$Y))
      aic_values[i] <- log(mse) + 2 * n_params / length(balsamico_data$Y)
      
      results[[as.character(L)]] <- result
    } else {
      aic_values[i] <- Inf
    }
  }
  
  optimal_L <- L_range[which.min(aic_values)]
  cat("Optimal number of latent factors:", optimal_L, "\n")
  
  return(list(
    optimal_L = optimal_L,
    optimal_result = results[[as.character(optimal_L)]],
    aic_values = aic_values,
    L_range = L_range
  ))
}

cat("\nBALSAMICO analysis framework ready for gravity microbiome research!\n")

